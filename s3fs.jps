version: 1.0
type: update
name: 'S3 Mount Manager'
id: 's3fs'
baseUrl: https://raw.githubusercontent.com/layershift/jps-s3fs/main

categories:
 - apps/others

description:
  short: Add/Edit/Remove S3 Mounts

targetNodes:
  nodeType:
  - apache
  - apache2
  - apache2-ruby
  - nginxphp
  - nginx-ruby
  - tomcat
  - postgresql
  - glassfish
  - payara
  - jetty
  - springboot
  - nodejs
  - litespeedphp
  - lemp
  - golang
  - mysql
  - mariadb-dockerized
  - perconadb
  - mongodb
  - redis

settings:
  add:
    fields:
    - type: string
      caption: Bucket name
      name: bucketName
      regex: ^[/\S+/]*$
      regexTest: No white spaces
      tooltip: "Mount directory from bucket: BucketName:/DirectoryName"
      required: true

    - type: string
      caption: Mount password
      name: mountPassword
      required: true

    - type: string
      caption: Mount location
      name: mountLocation
      regex: 
      required: true


    - type: string
      caption: URL [https://myurl.tld]
      name: mountURL
      regex: ^https?:\/\/[\-aA-zZ0-9.]*
      regexTest: Full URL required (http(s)://myurl.tld)
      required: true

  removeMount:
    fields:
    - type: string
      caption: Bucket name
      name: bucketName
      required: true    

  unmount:
    fields:
    - type: string
      caption: Bucket name
      name: bucketName
      required: true    



buttons:
  - caption: Check status
    loadingText: Checking..
    action: checkStatus
  - menu:
    - caption: Add mount
      loadingText: Adding mount..
      settings: add
      confirmText: Are you sure you wish to add this mount?
      action: addMount
      successText: Success

    - caption: Remove mount
      loadingText: Removing..
      settings: removeMount
      confirmText: Are you sure?
      action: removeMount
      successText: Success

    - caption: Unmount
      loadingText: Unmounting..
      settings: unmount
      confirmText: Are you sure?
      action: unmount
      successText: Success

    - caption: List mounts
      action: listMounts

    - caption: Mount all
      loadingText: Mounting..
      confirmText: Are you sure?
      action: mountAll
      sucessText: Success

    - caption: Unmount all
      loadingText: Unmounting..
      confirmText: Are you sure?
      action: unmountAll
      successText: Success    


onAfterRedeployContainer [cp]:
  - forEach(event.response.responses):
      deployRPM:
        nodeId: ${@i.nodeid}


onInstall: doInstall

onAfterScaleOut [nodeGroup:cp]:
  - forEach(event.response.nodes):
      deployRPM:
        nodeId: ${@i.id}


onUninstall:
  - forEach(nodes.cp):
    - cmd [${@i.id}]:
      - if [ $(mount | grep -i ^s3fs | wc -l) -eq 0 ]; then yum -y remove s3fs-fuse; else echo "Mounts exist. Unmount first"; exit 1; fi;
      - if [ -f /etc/cron.d/s3fs ]; then rm -f /etc/cron.d/s3fs; fi;
      sayYes: true
      user: root


actions:
  doInstall:
    - forEach(nodes.cp):
        deployRPM:
          nodeId: ${@i.id}

  deployRPM:
    - cmd[${this.nodeId}]:
      - echo -e "\n\nOn node ${targetNodes.join(id,)}";
      - which rpm 2>/dev/null >/dev/null; if [ $? -gt 0 ]; then echo -e "Issue:\nrpm not found"; exit 0; fi;
      - yum -y install epel-release; if [ $? -gt 0 ]; then echo -e "\nIssue:\nCan't install epel-release"; exit 0; fi;
      - yum -y install s3fs-fuse; if [ $? -gt 0 ]; then echo -e "\nIssue:\nCan't install s3fs"; exit 0; fi;
      - wget ${baseUrl}/scripts/s3fs-manager -O /usr/local/bin/s3fs-manager;
      - wget ${baseUrl}/scripts/s3fs-reboot -O /usr/local/bin/s3fs-reboot;
      - chmod +x /usr/local/bin/s3fs-manager;
      - chmod +x /usr/local/bin/s3fs-reboot;
      - echo "@reboot root /bin/bash /usr/local/bin/s3fs-reboot 2>&1 >/dev/null" > /etc/cron.d/s3fs
      sayYes: true
      user: root

  checkStatus:
    - cmd [cp]:
      - rpm -q s3fs-fuse 2>&1 1>/dev/null
      - if [ $? -eq 0 ]; then echo "s3fs is installed"; else echo "s3fs is not installed"; fi;
      user: root
      sayYes: true 
    - return:
      type: success
      message: ${response.out}

  addMount:
    - cmd [cp]:
      - HOME_DIR=$(grep jelastic /etc/passwd | awk -F ":" '{print $6}')
      - if [ ! -d $HOME_DIR/.s3fs/secrets ]; then mkdir -p $HOME_DIR/.s3fs/secrets; fi;
      - if [ ! -d $HOME_DIR/.s3fs/mounts ]; then mkdir -p $HOME_DIR/.s3fs/mounts; fi;
      - echo ${settings.mountPassword} > $HOME_DIR/.s3fs/secrets/${settings.bucketName};
      - echo "s3fs ${settings.bucketName} ${settings.mountLocation} -o passwd_file=$HOME_DIR/.s3fs/secrets/${settings.bucketName} -o url=${settings.mountURL} -o allow_other -o nonempty" > $HOME_DIR/.s3fs/mounts/${settings.bucketName};
      - chmod 600 $HOME_DIR/.s3fs/secrets/${settings.bucketName};
      - /usr/local/bin/s3fs-manager mount $HOME_DIR/.s3fs/mounts/${settings.bucketName};
      - if [ $? -ne 0 ]; then rm $HOME_DIR/.s3fs/secrets/${settings.bucketName}; rm $HOME_DIR/.s3fs/mounts/${settings.bucketName}; fi;
      user: jelastic
      sayYes: true
      return:
        type: success
        message: ${response.out}


  removeMount:
    - cmd [cp]:
      - HOME_DIR=$(grep jelastic /etc/passwd | awk -F ":" '{print $6}')
      - /usr/local/bin/s3fs-manager umount $HOME_DIR/.s3fs/mounts/${settings.bucketName};
      - if [ -f $HOME_DIR/.s3fs/mounts/${settings.bucketName} ]; then rm -f $HOME_DIR/.s3fs/mounts/${settings.bucketName}; fi;
      - if [ -f $HOME_DIR/.s3fs/secrets/${settings.bucketName} ]; then rm -f $HOME_DIR/.s3fs/secrets/${settings.bucketName}; fi;
      user: jelastic
      sayYes: true
      return:
        type: success
        message: ${response.out}



  unmount:
    - cmd [cp]:
      - HOME_DIR=$(grep jelastic /etc/passwd | awk -F ":" '{print $6}')
      - /usr/local/bin/s3fs-manager umount $HOME_DIR/.s3fs/mounts/${settings.bucketName};
      user: jelastic
      sayYes: true
      return:
        type: success
        message: ${response.out}

  listMounts:
    - cmd [cp]:
      - HOME_DIR=$(grep jelastic /etc/passwd | awk -F ":" '{print $6}')
      - /usr/local/bin/s3fs-manager list;
      user: jelastic
      sayYes: true
      return:
        type: success
        message: ${response.out}

  mountAll:
    - cmd [cp]:
      - /usr/local/bin/s3fs-manager mountall
      user: jelastic
      sayYes: true
      return:
        type: success
        message: ${response.out}


  unmountAll:
    - cmd [cp]:
      - /usr/local/bin/s3fs-manager umountall
      user: jelastic
      sayYes: true
      return:
        type: success
        message: ${response.out}      
