#!/bin/bash

HOME_DIR=$(grep jelastic /etc/passwd | awk -F ":" '{print $6}')

function print_help() {
cat <<EOF
Purpose: Interact with S3 mounts

Usage: $0 [command]

Commands:

mount [bucket name]                	Mount a bucket
umount [bucket name]              	Unmount a bucket
list								List buckets
mountall 							Mount all buckets
umountall							Unmount all buckets



EOF
}

action=""
while [[ $# -gt 0 ]]; do
    param="$1"
    shift
    case $param in
        --help)
            print_help
            exit
        ;;
        mount)
            action="mount"
            if [ ! -z "$1" ]; then
            	if [ -f "$1" ]; then
            		mountLocation=$1
            	else
            		if [ -f $HOME_DIR/.s3fs/mounts/$1 ]; then
            			mountLocation=$HOME_DIR/.s3fs/mounts/$1
            		else
            			echo "Error: mount location not found"
            			exit 1;
            		fi;
            	fi;          
            else
            	echo "Error: mount location was not specified"
            	exit 1;
            fi;
            shift
        ;;
        umount)
			action="umount"
			if [ ! -z "$1" ]; then
            	if [ -f "$1" ]; then
            		mountLocation=$1
            	else
            		if [ -f $HOME_DIR/.s3fs/mounts/$1 ]; then
            			mountLocation=$HOME_DIR/.s3fs/mounts/$1
            		else
            			echo "Error: mount location not found"
            			exit 1;
            		fi;
            	fi;          
            else
            	echo "Error: mount location was not specified"
            	exit 1;
            fi;
            shift
		;;
		list)
			action="list"
        ;;
        mountall)
			action="mountall"
		;;
		umountall)
			action="umountall"
		;;
    esac;
done;


case $action in
	mount)
		MOUNTPOINT=$(awk '{print $3}' $mountLocation)
		echo $MOUNTPOINT | egrep -q "^/root|^/$"
		if [ $? -eq 0 ]; then
			echo "Invalid mountpoint"
			exit 1;
		fi;
		mkdir -p $MOUNTPOINT
		/bin/bash $mountLocation
		if [ $? -eq 0 ]; then
			echo "$(awk {'print $2'} $mountLocation) mounted on $(awk {'print $3'} $mountLocation)";
		else
			echo "Cannot mount"
		fi;

	;;

	umount)
		fusermount -u $( awk '{print $3}' $mountLocation ) 
		if [ $? -eq 0 ]; then
			echo "$(awk {'print $2'} $mountLocation) unmounted from $(awk {'print $3'} $mountLocation)";
		else
			echo "Cannot unmount"
		fi;

	;;

	list)
		CHECKVAR=$(ls -1 ~/.s3fs/mounts/ | wc -l)
			if [[ "$CHECKVAR" -eq 0 ]]; then echo "No mounts available"; fi;
		for bucketname in $(ls -1 ~/.s3fs/mounts/); do
        		MOUNTPOINT=$(awk '{print $3}' ~/.s3fs/mounts/$bucketname )
        		mount | grep -q $MOUNTPOINT 2>/dev/null
        		if [ $? -eq 0 ]; then
                	echo -e "\n $bucketname - MOUNTED on $MOUNTPOINT"
        		else
                	echo -e "\n $bucketname - NOT MOUNTED"
        		fi;
		done;
	;;

	mountall)
		for bucketname in $(ls -1 ~/.s3fs/mounts/); do
        		MOUNTPOINT=$(awk '{print $3}' ~/.s3fs/mounts/$bucketname )
        		echo $MOUNTPOINT | egrep -q "^/root|^/$"
        		if [ $? -eq 0 ]; then
        			echo -e "\n Invalid mountpoint"
        			continue
        		fi;

				mount | grep -q $MOUNTPOINT 2>/dev/null
				if [ $? -ne 0 ]; then
					/bin/bash ~/.s3fs/mounts/$bucketname
				fi

				if [ $? -eq 0 ]; then
					echo -e "\n $bucketname - MOUNTED on $MOUNTPOINT"
                else
					echo -e "\n Failed to mount $bucketname"
					continue
                fi;
		done;
	;;

	umountall)
		for bucketname in $(ls -1 ~/.s3fs/mounts/); do
				MOUNTPOINT=$(awk '{print $3}' ~/.s3fs/mounts/$bucketname )
				mount | grep -q $MOUNTPOINT 2>/dev/null
				if [ $? -eq 0 ]; then
					fusermount -u $MOUNTPOINT
				if [ $? -ne 0 ]; then
					echo -e "\n $bucketname - UNMOUNTED from $MOUNTPOINT"
				else
					echo -e "\n Cannot unmount $bucketname"
					continue
				fi;
			fi;
		done;
	;;

	*)
		print_help
		exit
	;;
esac
